- name: Check hub.github.com for new version
  uri:
    url: "{{ hub_release_url }}"
    method: HEAD
  register: hub_release_resp

- name: Hub release url
  debug: msg="{{ hub_release_resp.url }}"
  changed_when: No

- name: "Check Local Hub is already installed?"
  stat:
    path: /usr/local/bin/hub
  register: hub
  changed_when: No

- name: Show hub binary stat
  debug: msg="{{ hub.stat }}"
  changed_when: No

- name: Extract release version
  shell: "echo {{ hub_release_resp.url }} | sed 's_{{ hub_strip_url }}__'"
  register: hub_version
  ignore_errors: No
  changed_when: No

- name: Check current installed hub version
  shell: "/usr/local/bin/hub --version | sed -n '/hub version/s_hub version __p'"
  register: hub_installed_version
  ignore_errors: Yes
  changed_when: No

- name: Show hub version variable
  debug: msg="{{ hub_version }}"

- name: Show hub installed version
  debug: msg="{{ hub_installed_version }}"
  changed_when: No

- name: Download Hub
  get_url:
    url: "https://github.com/github/hub/releases/download/v{{ hub_version.stdout }}/hub-linux-amd64-{{ hub_version.stdout }}.tgz"
    dest: "/tmp/{{ hub_version.stdout }}.tgz"
  ignore_errors: False
  when: not hub.stat.exists or hub_installed_version.stdout != hub_version.stdout

- name: "Unarchive source {{ hub_version.stdout }}"
  unarchive:
    src: "/tmp/{{ hub_version.stdout }}.tgz"
    dest: "/tmp/"
    copy: No
  when: not hub.stat.exists or hub_installed_version.stdout != hub_version.stdout

- name: Install Hub
  become: Yes
  shell: "cd /tmp/hub-linux-amd64-{{ hub_version.stdout }} && ./install"
  ignore_errors: No
  when: not hub.stat.exists or hub_installed_version.stdout != hub_version.stdout

- name: "Remove file /tmp/{{ hub_version.stdout }}.tgz"
  file:
    path: "/tmp/{{ hub_version.stdout }}.tgz"
    state: absent
  ignore_errors: Yes

- name: "Recursively remove directory /tmp/hub-linux-amd64-{{ hub_version.stdout }}"
  file:
    path: "/tmp/hub-linux-amd64-{{ hub_version.stdout }}"
    state: absent
  ignore_errors: True